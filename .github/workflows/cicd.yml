name: workflow
on:
  push:
    branches: [ main, release ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Analysing the code with pylint
        run: |
          pylint `ls -R|grep .py$|xargs`
      - name: Run Tests
        run: |
          python ./test/hello.py test
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  ponicode:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: |
        npm install -g ponicode
        npm i --save-dev rewire @types/rewire jest@26 ts-jest@26 @types/jest
    
    # Identify which files are impacted by the Push / PR
    - id: get_changed_files
      uses: jitterbit/get-changed-files@v1
      continue-on-error: true
      with:
        format: 'json'

    # Extract branch name
    - id: extract_branch
      if: github.event_name == 'pull_request'
      run: echo "::set-output name=BRANCH_NAME::$(echo ${GITHUB_HEAD_REF})"
    
    # Run Ponicode Unit-Testing Action
    - uses: ponicode/unit-testing-action@master
      with:
        repoURL: ${{github.repository}} # DO NOT MODIFY
        branch: ${{ steps.extract_branch.outputs.BRANCH_NAME }} # DO NOT MODIFY
        githubToken: ${{ secrets.GITHUB_TOKEN }} # DO NOT MODIFY
        ponicodeUtToken: ${{ secrets.PONICODE_TOKEN }} # DO NOT MODIFY
        impactedFiles: ${{ steps.get_changed_files.outputs.added_modified }} # DO NOT MODIFY IF YOU WANT TO GENERATE TESTS ON PR IMPACTED FILES ONLY
        commentUTs: "false"
        
  DeployDev:
    name: Deploy to Dev 
    if: |
     github.event.ref == 'refs/heads/main' ||
      github.event.ref == 'refs/tags/*'
    needs: [build , test ]
    runs-on: ubuntu-latest
    environment: 
      name: Dev
      url: 'http://dev.my.app.com'
    steps:
      - name: Deploy
        run: echo I am deploying! 
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Build the container image
        run: docker build . --file Dockerfile --tag localbuild/testimage:latest
      - uses: anchore/scan-action@v3
        with:
            image: "localbuild/testimage:latest"
            fail-build: false
      - uses: actions/checkout@master
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: rupesh1050/rupeshaccern
          username: ${{ secrets.DOCKER_NAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          dockerfile: Dockerfile
          tag_with_ref: 'refs/*'
          labels: ${{ steps.meta.outputs.labels }}
          
  DeployTest:
    name: Deploy to Test 
    if: |
     github.event.ref == 'refs/heads/release' ||
      github.event.ref == 'refs/tags/*'
    needs: [build , test ]
    runs-on: ubuntu-latest
    environment: 
      name: Staging
      url: 'http://test.myapp.com'
    steps:
      - name: Deploy
        run: echo I am deploying! 
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
  DeployStaging:
    name: Deploy to Staging 
    needs: [DeployTest]
    runs-on: ubuntu-latest
    environment: 
      name: Staging
      url: 'http://staging.myapp.com'
    steps:
      - name: Deploy
        run: echo I am deploying! 
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      

  DeployProd:
    name: Deploy to Production 
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    environment: 
      name: Production
      url: 'http://www.myapp.com'
    steps:
      - name: Deploy
        run: echo I am deploying! 
      - uses: actions/checkout@v2
      - name: Build the container image
        run: docker build . --file Dockerfile --tag localbuild/testimage:latest
      - uses: anchore/scan-action@v3
        with:
            image: "localbuild/testimage:latest"
            fail-build: false
      - uses: actions/checkout@master
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: rupesh1050/cicd-workflow
          username: ${{ secrets.DOCKER_NAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          dockerfile: Dockerfile
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
